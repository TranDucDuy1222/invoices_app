import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkcalendar import DateEntry
import customtkinter as ctk
from datetime import datetime, timedelta

class CaiDatView(tk.Frame):
    def __init__(self, parent, root_window):
        super().__init__(parent, bg="white")
        
        self.root_window = root_window
        self.controller = None
        self.table_vars = {}

        self.create_widgets()

    def create_widgets(self):
        main_frame = tk.Frame(self, bg="white", padx=30, pady=20)
        main_frame.pack(expand=True, fill="both")

        tk.Label(main_frame, text="Qu·∫£n l√Ω v√† X√≥a D·ªØ Li·ªáu", font=("Segoe UI", 18, "bold"), bg="white").pack(anchor="w", pady=(0, 20))

        # --- Frame X√≥a theo ng√†y ---
        date_frame = tk.LabelFrame(main_frame, text="X√≥a d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian", font=("Segoe UI", 12), bg="white", padx=15, pady=15)
        date_frame.pack(fill="x", pady=10)

        tk.Label(date_frame, text="T·ª´ ng√†y:", bg="white", font=("Segoe UI", 10)).grid(row=0, column=0, padx=(0, 5), pady=5)
        self.start_date_entry = DateEntry(date_frame, width=15, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy', font=("Segoe UI", 10))
        self.start_date_entry.set_date(datetime.now() - timedelta(days=30))
        self.start_date_entry.grid(row=0, column=1, pady=5)

        tk.Label(date_frame, text="ƒê·∫øn ng√†y:", bg="white", font=("Segoe UI", 10)).grid(row=0, column=2, padx=(20, 5), pady=5)
        self.end_date_entry = DateEntry(date_frame, width=15, background='darkblue', foreground='white', borderwidth=2, date_pattern='dd/mm/yyyy', font=("Segoe UI", 10))
        self.end_date_entry.grid(row=0, column=3, pady=5)

        # --- Frame ch·ªçn b·∫£ng ---
        tables_frame = tk.LabelFrame(main_frame, text="Ch·ªçn lo·∫°i d·ªØ li·ªáu ƒë·ªÉ x√≥a", font=("Segoe UI", 12), bg="white", padx=15, pady=15)
        tables_frame.pack(fill="x", pady=10)

        # C√°c b·∫£ng c√≥ th·ªÉ x√≥a
        # Key: T√™n hi·ªÉn th·ªã, Value: T√™n b·∫£ng trong DB
        self.tables_map = {
            "H√≥a ƒë∆°n v√† Chi ti·∫øt Hƒê": "invoices",
            "C√¥ng n·ª£": "debts",
            "To√†n b·ªô Kh√°ch h√†ng": "customers",
            "To√†n b·ªô M·∫∑t h√†ng": "products",
            "To√†n b·ªô B√£i v√† Xe": "yards" # Ch·ªçn 1 ƒë·∫°i di·ªán
        }
        
        # B·∫£ng ph·ª• thu·ªôc
        self.dependent_tables = {
            "invoices": ["invoice_details"],
            "customers": ["addresses"],
            "yards": ["cars"]
        }

        for i, (display_name, table_name) in enumerate(self.tables_map.items()):
            var = tk.BooleanVar()
            cb = ctk.CTkCheckBox(
                tables_frame,
                text=display_name,
                variable=var,
                font=("Segoe UI", 11),
                text_color="black"  # üîπ M√†u ch·ªØ ƒëen
            )
            cb.grid(row=i, column=0, sticky="w", pady=4)
            self.table_vars[table_name] = var

        # --- Frame ch·ª©a c√°c n√∫t h√†nh ƒë·ªông ---
        action_frame = tk.Frame(main_frame, bg="white")
        action_frame.pack(fill="x", pady=20, side="bottom")

        delete_by_date_btn = ctk.CTkButton(action_frame, text="X√≥a theo ng√†y ƒë√£ ch·ªçn", command=self.delete_by_date, font=("Segoe UI", 11, "bold"), fg_color="#f39c12")
        delete_by_date_btn.pack(side="left", expand=True, padx=5, ipady=5)

        delete_all_btn = ctk.CTkButton(action_frame, text="X√ìA T·∫§T C·∫¢ D·ªÆ LI·ªÜU ƒê√É CH·ªåN", command=self.delete_all, font=("Segoe UI", 11, "bold"), fg_color="#e74c3c")
        delete_all_btn.pack(side="left", expand=True, padx=5, ipady=5)

    def get_selected_tables(self):
        """L·∫•y danh s√°ch c√°c b·∫£ng ƒë√£ ƒë∆∞·ª£c ch·ªçn, bao g·ªìm c·∫£ c√°c b·∫£ng ph·ª• thu·ªôc."""
        selected = []
        for table_name, var in self.table_vars.items():
            if var.get():
                selected.append(table_name)
                # Th√™m c√°c b·∫£ng ph·ª• thu·ªôc n·∫øu c√≥
                if table_name in self.dependent_tables:
                    selected.extend(self.dependent_tables[table_name])
        return selected

    def delete_by_date(self):
        """H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t 'X√≥a theo ng√†y'."""
        selected_tables = self.get_selected_tables()
        start_date = self.start_date_entry.get_date()
        end_date = self.end_date_entry.get_date()

        if not selected_tables:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn lo·∫°i d·ªØ li·ªáu c·∫ßn x√≥a.")
            return

        confirm_msg = f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a d·ªØ li·ªáu c·ªßa c√°c m·ª•c ƒë√£ ch·ªçn t·ª´ ng√†y {start_date.strftime('%d/%m/%Y')} ƒë·∫øn {end_date.strftime('%d/%m/%Y')} kh√¥ng?\n\nH√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ ho√†n t√°c."
        if messagebox.askyesno("X√°c nh·∫≠n x√≥a", confirm_msg):
            if self.controller:
                self.controller.delete_data_by_date(selected_tables, start_date, end_date)

    def delete_all(self):
        """H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t 'X√≥a t·∫•t c·∫£'."""
        selected_tables = self.get_selected_tables()

        if not selected_tables:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn lo·∫°i d·ªØ li·ªáu c·∫ßn x√≥a.")
            return

        confirm_msg = f"C·∫¢NH B√ÅO C·ª∞C K·ª≤ NGUY HI·ªÇM!\n\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a TO√ÄN B·ªò d·ªØ li·ªáu kh·ªèi c√°c m·ª•c ƒë√£ ch·ªçn kh√¥ng?\n\nH√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn v√† KH√îNG TH·ªÇ ho√†n t√°c."
        if messagebox.askyesno("X√ÅC NH·∫¨N L·∫¶N CU·ªêI", confirm_msg, icon='error'):
            if self.controller:
                self.controller.delete_all_data(selected_tables)
